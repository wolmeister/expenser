version: '3.8'

networks:
  traefik-public:
    external: true
    driver: overlay

services:
  proxy:
    image: traefik:v2.2
    ports:
      # Traefik service
      - target: 80
        published: 81
        mode: host
      # Traefik Admin
      - target: 8080
        published: 9091
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - traefik-public
      - default
    deploy:
      placement:
        constraints:
          - node.role == manager
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker=true
      # Add a constraint to only use services with the label "traefik.constraint-label=label=traefik-public"
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `label=traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      - --api.insecure=true
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      # Use the custom label "traefik.constraint-label=label=traefik-public"
      # This public Traefik will only use services with this label
      - traefik.constraint-label=label=traefik-public

  web:
    image: 177.44.248.70:5000/expenser-web:stable
    networks:
      - traefik-public
    depends_on:
      - api
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 20s
      labels:
        - traefik.enable=true
        - traefik.constraint-label=label=traefik-public
        - traefik.docker.network=traefik-public
        - traefik.http.routers.web.rule=Host(`expenser.wolmeister.com`)
        - traefik.http.services.web.loadbalancer.server.port=80
        - traefik.http.services.web.loadbalancer.sticky.cookie=true
    healthcheck:
      test: ['CMD-SHELL', 'wget --spider http://localhost || exit 1']
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    image: 177.44.248.70:5000/expenser-api:stable
    depends_on:
      - db
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=db
      - DB_DATABASE=expenser
      - DB_USER_FILE=/run/secrets/db-user
      - DB_PASSWORD_FILE=/run/secrets/db-password
      - DB_MIN_POOL=0
      - DB_MAX_POOL=10
      - JWT_SECRET_FILE=/run/secrets/jwt-secret
    secrets:
      - db-user
      - db-password
      - jwt-secret
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 20s
      labels:
        - traefik.enable=true
        - traefik.constraint-label=label=traefik-public
        - traefik.docker.network=traefik-public
        - traefik.http.routers.api.rule=Host(`api.expenser.wolmeister.com`)
        - traefik.http.services.api.loadbalancer.server.port=3000
    healthcheck:
      test: ['CMD-SHELL', 'wget --spider http://localhost:3000/health || exit 1']
      interval: 5s
      timeout: 5s
      retries: 5

  db:
    image: postgres:13
    volumes:
      - dbdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=expenser
      - POSTGRES_USER_FILE=/run/secrets/db-user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    secrets:
      - db-user
      - db-password
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 20s
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $$(cat $$POSTGRES_USER_FILE) -d $$POSTGRES_DB']
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  dbdata:

secrets:
  db-user:
    file: ./db-user.txt
  db-password:
    file: ./db-password.txt
  jwt-secret:
    file: ./jwt-secret.txt
