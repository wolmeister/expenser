version: '3.8'

services:
  proxy:
    image: jwilder/nginx-proxy:latest
    ports:
      - target: 80
        published: 81
        mode: host
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro

  web:
    image: 177.44.248.70:5000/expenser-web:stable
    environment:
      - VIRTUAL_HOST=expenser.wolmeister.com
      - VIRTUAL_PORT=80
    depends_on:
      - api
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 20s
    healthcheck:
      test: ['CMD-SHELL', 'wget --spider http://localhost || exit 1']
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    image: 177.44.248.70:5000/expenser-api:stable
    depends_on:
      - db
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=db
      - DB_DATABASE=expenser
      - DB_USER_FILE=/run/secrets/db-user
      - DB_PASSWORD_FILE=/run/secrets/db-password
      - DB_MIN_POOL=2
      - DB_MAX_POOL=10
      - JWT_SECRET_FILE=/run/secrets/jwt-secret
      - VIRTUAL_HOST=api.expenser.wolmeister.com
      - VIRTUAL_PORT=3000
    secrets:
      - db-user
      - db-password
      - jwt-secret
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 20s
    healthcheck:
      test: ['CMD-SHELL', 'wget --spider http://localhost:3000/health || exit 1']
      interval: 5s
      timeout: 5s
      retries: 5

  db:
    image: postgres:13
    volumes:
      - dbdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=expenser
      - POSTGRES_USER_FILE=/run/secrets/db-user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    secrets:
      - db-user
      - db-password
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 20s
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $$(cat $$POSTGRES_USER_FILE) -d $$POSTGRES_DB']
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  dbdata:

secrets:
  db-user:
    file: ./db-user.txt
  db-password:
    file: ./db-password.txt
  jwt-secret:
    file: ./jwt-secret.txt
